import org.apache.tools.ant.filters.ReplaceTokens

plugins {
	id 'com.github.johnrengelman.shadow' version '6.0.0'
	id 'maven-publish'
	id 'eclipse'
	id 'java'
}

jar.archiveName = project.name + '.jar'

repositories {
	mavenCentral()
	jcenter()

	// Spigot
	maven {
		url 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
	}

	// Bungeecord
	maven {
		url "https://oss.sonatype.org/content/repositories/snapshots"
	}

	// Velocity
	maven {
		url "https://repo.velocitypowered.com/snapshots/"
	}

	// Jitpack
	maven {
		url 'https://jitpack.io'
	}

	maven {
		url 'https://maven.pkg.github.com/Sitrica/Japson/'
		credentials {
            username = "Sitrica"
            password = System.getenv("GITHUB_PACKAGES_KEY")
        }
	}

}

dependencies {

	// Nullable annotation
	implementation (group: 'org.eclipse.jdt', name: 'org.eclipse.jdt.annotation', version: '2.2.600')

	// Velocity
	implementation (group: 'com.velocitypowered', name: 'velocity-api', version: '1.0.0-SNAPSHOT')

	// Spigot
	implementation (group: 'org.spigotmc', name: 'spigot-api', version: '1.15.2-R0.1-SNAPSHOT')

	// Bungeecord
	implementation (group: 'net.md-5', name: 'bungeecord-protocol', version: '1.16-R0.3-SNAPSHOT')
	implementation (group: 'net.md-5', name: 'bungeecord-api', version: '1.16-R0.3-SNAPSHOT')

	// Skript
	implementation (group: 'com.github.SkriptLang', name: 'Skript', version: '2.5-alpha3') {
		transitive = false
	}

	// Toml for Velocity
	implementation (group: 'com.moandjiezana.toml', name: 'toml4j', version: '0.7.2')

	// Reflections
	shadow (group: 'org.reflections', name: 'reflections', version: '0.9.12')

	// Japson
	shadow (group: 'com.sitrica', name: 'japson', version: '1.1.0')

	testRuntimeOnly (group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.6.0')
	testImplementation (group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.6.0')
	testImplementation (group: 'com.sitrica', name: 'japson-beta', version: '1.0.8.2-SNAPSHOT')
	testImplementation (group: 'org.reflections', name: 'reflections', version: '0.9.12')

	shadow (group: 'org.json', name: 'json', version: '20200518')

}

publishing {
	repositories {
		maven {
			name = "Japson"
			url = uri("https://maven.pkg.github.com/Skungee/Skungee-2.0.0")
			credentials {
				username = 'Skungee'
				password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_PACKAGES_KEY")
			}
		}
	}
	publications {
		shadow(MavenPublication) {publication ->
			project.shadow.component(publication)
			version = version
			groupId = 'com.skungee'
			def releases = 'skungee' // Don't modify
			def snapshots = 'skungee-beta' // Don't modify
			artifactId = version.endsWith('SNAPSHOT') || version.contains('ALPHA') ? snapshots : releases
		}
	}
}

processResources {
	filter ReplaceTokens, tokens: ["version": project.property("version")]
	from (sourceSets.main.resources.srcDirs) {
		include '*.yml'
		include '*.toml'
	}
	from ("lang/") {
		include '*.lang'
		into 'lang/'
	}
}

shadowJar {
	configurations = [project.configurations.shadow]
	archiveVersion = version
	baseName = project.name
	classifier = ''
	minimize()
}

test {

	useJUnitPlatform()

	// show standard out and standard error of the test JVM(s) on the console
	testLogging.showStandardStreams = true

	// set heap size for the test JVM(s)
	minHeapSize = "128m"
	maxHeapSize = "512m"

	// listen to events in the test execution lifecycle
	beforeTest { descriptor ->
		 logger.lifecycle("Running test: " + descriptor)
	}

	// listen to standard out and standard error of the test JVM(s)
	onOutput { descriptor, event ->
		 logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
	}

}
